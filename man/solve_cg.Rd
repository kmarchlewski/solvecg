% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solve_cg.R
\name{solve_cg}
\alias{solve_cg}
\title{Solves a linear and symmetric system of equations}
\usage{
solve_cg(A, x, b, precond, itermax, resmax)
}
\arguments{
\item{A}{A symmetric matrix.}

\item{x}{A solution vector. The conjugate gradient method requires
a starting point. The x vector should contain an initial guess about
a result.}

\item{b}{A vector of right hand side values.}

\item{precond}{A type of preconditioner to be used during the iteration
process. Possible choices are: 'I' - identity --- no preconditioning,
'J' --- Jacobi preconditioner, 'GS' Gauss-Seidel preconditioner.}

\item{itermax}{A maximum number of iterations.}

\item{resmax}{A maximal acceptable residuum.}
}
\value{
A list of two elements: \code{$iteration} --- a value of iterations
necessary to calculate a solution, \code{residuum} --- a value containing
a minimal obtained residuum.
}
\description{
The function calculates a solution of the Ax = b system using the conjugate
gradient method.
}
\examples{
lehmer <- lehmer(10)
x <- rep(0, 10)
b <- lehmer$matrix \%*\% seq(1, 10)
solve_cg(lehmer$matrix, x, b, "I", 100, 1e-9)
range(seq(1, 10) - x)

}
